"""
This type stub file was generated by pyright.
"""

import sys
import collections
import pyrect
from ._pygetwindow_win import Win32Window, getActiveWindow, getActiveWindowTitle, getAllTitles, getAllWindows, getWindowsAt, getWindowsWithTitle

__version__ = ...
class PyGetWindowException(Exception):
    """
    Base class for exceptions raised when PyGetWindow functions
    encounter a problem. If PyGetWindow raises an exception that isn't
    this class, that indicates a bug in the module.
    """
    ...


def pointInRect(x, y, left, top, width, height):
    """Returns ``True`` if the ``(x, y)`` point is within the box described
    by ``(left, top, width, height)``."""
    ...

Rect = ...
Point = ...
Size = ...
class BaseWindow:
    def __init__(self) -> None:
        ...
    
    def __str__(self) -> str:
        ...
    
    def close(self):
        """Closes this window. This may trigger "Are you sure you want to
        quit?" dialogs or other actions that prevent the window from
        actually closing. This is identical to clicking the X button on the
        window."""
        ...
    
    def minimize(self):
        """Minimizes this window."""
        ...
    
    def maximize(self):
        """Maximizes this window."""
        ...
    
    def restore(self):
        """If maximized or minimized, restores the window to it's normal size."""
        ...
    
    def activate(self):
        """Activate this window and make it the foreground window."""
        ...
    
    def resizeRel(self, widthOffset, heightOffset):
        """Resizes the window relative to its current size."""
        ...
    
    def resizeTo(self, newWidth, newHeight):
        """Resizes the window to a new width and height."""
        ...
    
    def moveRel(self, xOffset, yOffset):
        """Moves the window relative to its current position."""
        ...
    
    def moveTo(self, newLeft, newTop):
        """Moves the window to new coordinates on the screen."""
        ...
    
    @property
    def isMinimized(self):
        """Returns True if the window is currently minimized."""
        ...
    
    @property
    def isMaximized(self):
        """Returns True if the window is currently maximized."""
        ...
    
    @property
    def isActive(self):
        """Returns True if the window is currently the active, foreground window."""
        ...
    
    @property
    def title(self):
        """Returns the window title as a string."""
        ...
    
    @property
    def visible(self):
        ...
    
    @property
    def left(self): # -> float | int:
        ...
    
    @left.setter
    def left(self, value): # -> None:
        ...
    
    @property
    def right(self): # -> float | int:
        ...
    
    @right.setter
    def right(self, value): # -> None:
        ...
    
    @property
    def top(self): # -> float | int:
        ...
    
    @top.setter
    def top(self, value): # -> None:
        ...
    
    @property
    def bottom(self): # -> float | int:
        ...
    
    @bottom.setter
    def bottom(self, value): # -> None:
        ...
    
    @property
    def topleft(self): # -> Point:
        ...
    
    @topleft.setter
    def topleft(self, value): # -> None:
        ...
    
    @property
    def topright(self): # -> Point:
        ...
    
    @topright.setter
    def topright(self, value): # -> None:
        ...
    
    @property
    def bottomleft(self): # -> Point:
        ...
    
    @bottomleft.setter
    def bottomleft(self, value): # -> None:
        ...
    
    @property
    def bottomright(self): # -> Point:
        ...
    
    @bottomright.setter
    def bottomright(self, value): # -> None:
        ...
    
    @property
    def midleft(self): # -> Point:
        ...
    
    @midleft.setter
    def midleft(self, value): # -> None:
        ...
    
    @property
    def midright(self): # -> Point:
        ...
    
    @midright.setter
    def midright(self, value): # -> None:
        ...
    
    @property
    def midtop(self): # -> Point:
        ...
    
    @midtop.setter
    def midtop(self, value): # -> None:
        ...
    
    @property
    def midbottom(self): # -> Point:
        ...
    
    @midbottom.setter
    def midbottom(self, value): # -> None:
        ...
    
    @property
    def center(self): # -> Point:
        ...
    
    @center.setter
    def center(self, value): # -> None:
        ...
    
    @property
    def centerx(self): # -> float | int:
        ...
    
    @centerx.setter
    def centerx(self, value): # -> None:
        ...
    
    @property
    def centery(self): # -> float | int:
        ...
    
    @centery.setter
    def centery(self, value): # -> None:
        ...
    
    @property
    def width(self): # -> float | int:
        ...
    
    @width.setter
    def width(self, value): # -> None:
        ...
    
    @property
    def height(self): # -> float | int:
        ...
    
    @height.setter
    def height(self, value): # -> None:
        ...
    
    @property
    def size(self): # -> Size:
        ...
    
    @size.setter
    def size(self, value): # -> None:
        ...
    
    @property
    def area(self): # -> float | int:
        ...
    
    @area.setter
    def area(self, value): # -> None:
        ...
    
    @property
    def box(self): # -> Box:
        ...
    
    @box.setter
    def box(self, value): # -> None:
        ...
    


if sys.platform == "darwin":
    ...
else:
    Window = Win32Window
