"""
This type stub file was generated by pyright.
"""

import ctypes
from pygetwindow import BaseWindow

NULL = ...
FORMAT_MESSAGE_ALLOCATE_BUFFER = ...
FORMAT_MESSAGE_FROM_SYSTEM = ...
FORMAT_MESSAGE_IGNORE_INSERTS = ...
SW_MINIMIZE = ...
SW_MAXIMIZE = ...
SW_HIDE = ...
SW_SHOW = ...
SW_RESTORE = ...
HWND_TOP = ...
WM_CLOSE = ...
class POINT(ctypes.Structure):
    _fields_ = ...


enumWindows = ...
enumWindowsProc = ...
getWindowText = ...
getWindowTextLength = ...
isWindowVisible = ...
class RECT(ctypes.Structure):
    """A nice wrapper of the RECT structure.

    Microsoft Documentation:
    https://msdn.microsoft.com/en-us/library/windows/desktop/dd162897(v=vs.85).aspx
    """
    _fields_ = ...


def getActiveWindow(): # -> Win32Window | None:
    """Returns a Window object of the currently active (focused) Window."""
    ...

def getActiveWindowTitle(): # -> Any | None:
    """Returns a string of the title text of the currently active (focused) Window."""
    ...

def getWindowsAt(x, y): # -> list[Unknown]:
    """Returns a list of Window objects whose windows contain the point ``(x, y)``.

    * ``x`` (int, optional): The x position of the window(s).
    * ``y`` (int, optional): The y position of the window(s)."""
    ...

def getWindowsWithTitle(title): # -> list[Unknown]:
    """Returns a list of Window objects that substring match ``title`` in their title text."""
    ...

def getAllTitles(): # -> list[Unknown]:
    """Returns a list of strings of window titles for all visible windows.
    """
    ...

def getAllWindows(): # -> list[Unknown]:
    """Returns a list of Window objects for all visible windows.
    """
    ...

class Win32Window(BaseWindow):
    def __init__(self, hWnd) -> None:
        ...
    
    def __repr__(self): # -> str:
        ...
    
    def __eq__(self, other) -> bool:
        ...
    
    def close(self): # -> None:
        """Closes this window. This may trigger "Are you sure you want to
        quit?" dialogs or other actions that prevent the window from
        actually closing. This is identical to clicking the X button on the
        window."""
        ...
    
    def minimize(self): # -> None:
        """Minimizes this window."""
        ...
    
    def maximize(self): # -> None:
        """Maximizes this window."""
        ...
    
    def restore(self): # -> None:
        """If maximized or minimized, restores the window to it's normal size."""
        ...
    
    def show(self): # -> None:
        """If hidden or showing, shows the window on screen and in title bar."""
        ...
    
    def hide(self): # -> None:
        """If hidden or showing, hides the window from screen and title bar."""
        ...
    
    def activate(self): # -> None:
        """Activate this window and make it the foreground (focused) window."""
        ...
    
    def resize(self, widthOffset, heightOffset): # -> None:
        """Resizes the window relative to its current size."""
        ...
    
    resizeRel = ...
    def resizeTo(self, newWidth, newHeight): # -> None:
        """Resizes the window to a new width and height."""
        ...
    
    def move(self, xOffset, yOffset): # -> None:
        """Moves the window relative to its current position."""
        ...
    
    moveRel = ...
    def moveTo(self, newLeft, newTop): # -> None:
        """Moves the window to new coordinates on the screen."""
        ...
    
    @property
    def isMinimized(self): # -> Any:
        """Returns ``True`` if the window is currently minimized."""
        ...
    
    @property
    def isMaximized(self): # -> Any:
        """Returns ``True`` if the window is currently maximized."""
        ...
    
    @property
    def isActive(self): # -> Literal[False]:
        """Returns ``True`` if the window is currently the active, foreground window."""
        ...
    
    @property
    def title(self): # -> Any:
        """Returns the window title as a string."""
        ...
    
    @property
    def visible(self): # -> Any:
        """Return ``True`` if the window is currently visible."""
        ...
    


def cursor(): # -> Point:
    """Returns the current xy coordinates of the mouse cursor as a two-integer
    tuple by calling the GetCursorPos() win32 function.

    Returns:
      (x, y) tuple of the current xy coordinates of the mouse cursor.
    """
    ...

def resolution(): # -> Size:
    """Returns the width and height of the screen as a two-integer tuple.

    Returns:
      (width, height) tuple of the screen size, in pixels.
    """
    ...

